package main

import (
	"context"
	"os"

	"github.com/Simplou/goxios"
	"github.com/Simplou/openai"
)

var (
	ctx        = context.Background()
	apiKey     = os.Getenv("OPENAI_KEY")
	client     = openai.New(ctx, apiKey)
	httpClient = goxios.New(ctx)
)

func main() {
	//chat()
	//https://www.youtube.com/watch?v=EXThuaEzxdc&t=679s
	chatByEmbedding(
		`
		what's up everyone in this video I'm\ngoing to give you an introduction into\nthe actor model specifically in golang I\nthink the actor model is a very\nundereducated model a very undereducated\nParadigm although\ndon't get me mistaken it's getting used\nin the industry big time right it's it's\nuh especially all these highly\nconcurrent applications RTS games uh the\nactor model even in gaming game service\nis is getting is getting used by\na long shot right so it's very important\nto know that especially for the people\nat writing go because go is very high\nconcurrent and I think golang has a very\nvery good place for the actor model but\nbefore we continue if you like the\nvideos that I'm providing to you please\nconsider subscribing because still 49 of\nMy Views are not yet subscribed and it's\njust one click away and you can do me an\nenormous favor because I don't have any\nsponsors I don't have ads it's all hey\nit's it's all for free right\num but especially try consider\nsubscriber to my channel also jump into\nmy Discord Community very important if\nyou want to get help and all that stuff\nat 24 7 open for business right and for\nthe people that really want to level up\nas a go engineer go to the patreon check\nit out it's a very exclusive videos\nin-depth topics a little bit of more\nadvanced and for the people that\nbasically want to learn how to write\ngolang basically uh\nfor their job they want to they want to\nbasically be a back-end goaling engineer\nI'm reopening the full-time godav.com\ncourse which I actually uh started but\nthen I canceled it but um because so\nmany people are asking me to open it to\ncontinue it after this video it's open\nfor enrollment there is a discount uh\ncheck the link and by the end of April\nis one month from now everything will be\nuploaded all the chapters it's going to\nbe huge it's it's a huge course it's\nit's everything it's the basics of gold\nconcurrency interfaces all that stuff\nit's going to have Json apis\nmicroservices Docker and you have a\ncomplete blockchain from scratch in that\ncompletely that's not available on the\ninternet all in the full-time codef\ncourse check it out mail me or DME if\nyou want to have more\ninformation about it all right without\nany further Ado let's continue the\nactive golden model so what I'm gonna do\nI have this uh small uh folder here it's\ngonna It's called Go acts because uh\nyeah I have no inspiration so what\nyou're gonna do we're going to make a\nnew file it's going to be main.go just\nlike that and we going to first of all\nI'm going to show you something right so\nlet's make uh let's let's make it heat\nwe're going to say type it's going to be\na handlet\nuh yes a Handler is fine that's going to\nbe a structure here the font is huge\nit's not going to lie and we're going to\nhave a state right and that state is\ngoing to be you went\nvery simple not too complex right and\nwe're gonna have a function here for\nexample uh funk\nuh each I need a new pc because each\ntime each time I record it it's like\nlike a focus so we're gonna say uh age\nhandle it and we're going to say handle\nmessage right very simple handle message\nand the message is going to be a unit\nand what we're going to do is basically\nwe're gonna say State equals MSG and\ncall it a date right so the problem is\nbasically that each time\nby the way guys my bad uh the problem\nwith that is in a concurrent environment\nthe handle message of this Handler is\ngoing to get called each time it\nreceives a message for example in grpc\nor HTTP or whatever and it's going to be\nhandled in zone gold in most of the time\nright so that's the first problem that\nalready arises right if you have a game\nserver or something you want to update\nplayer Health it's going to get called\ninside of a ticket set of a loop inside\nof a gold routine right so\nuh let's let's see what's going on so\nlet's make this Handler real quick we're\ngoing to say handle it heat\nand then we're going to say uh 4 I\nequals 0 I smaller than 10 for example I\nplus plus and then we're gonna actually\ndo\nH handle message and then we're gonna do\ny actually needs to be a u wins\njust like that\num Boolean expression is going on it for\nI yada yada yada this one is a problem\nnot anymore uh just like that so if we\nsave this and then we do go run main.go\nwe don't see anything actually to be\nhonest we're going to say go run dash\ndash erase main dot go so nothing is\ngoing to happen it's all fine because\nthis is getting called uh each time\nafter time right the state will be\nbasically incremented and not\nincremented it will be set by the\niterator each Loop in a synchronous way\nso there is no way to have these\nconditions the problem will be uh the\nproblem will arise if you do go right\nthen then we're gonna have some some\nShenanigans going on right you see uh\nbecause we are updating our states\nall at the same time ish right it's it's\nof course the goal line the goal\nscheduler will it's not at the same time\nit's not bad in parallel but you know\nyou know what I'm trying to say here so\nwe're gonna have a race condition so you\ncould already see that or Handler here\nit could be a player that could be\nwhatever you want this state is not safe\nanymore to use so how could you solve\nthat well uh in an in the classic\nprogramming what we do is we add a lock\nright we do a sync mutex or something\nhit and then we could lock or state each\ntime\num for reading or for writing or for\nboats and sometimes we we're gonna lock\nit at a certain point in our in our code\nand maybe we forget to unlock it and\nmaybe things are waiting for the same\nlock and especially in this highly\nconcurrent messages in a game server for\nexample I always say game server because\nit's a very good use case a very common\nuse case\nthere are a lot of updates going on and\nit could be that your program is\nbasically like not exhausted but it's\nslow because everybody is waiting for\nlocks and it's nasty hard to debug it's\njust\nit's you're gonna have a bad time right\nso how can we fix that right there is\nsomething that is called the actor model\nthe actor Paradigm and it's basically\nit's it's the the principle the of the\nmechanics the semantics of the actor\nmodel is that every\nevery piece of\nentity\nsomething that can act on something\nthat's why the actor model because\nyou're going to act upon messages right\neverything that needs to handle is State\neverything that that can receive some\nkind of a data it's very data oriented\napproach\num is it will basically handle that\nmessage after message right it's not\ngonna it's going to be if you send it to\n100 messages it's basically going to\nhandle its like a queue exactly I I\ncannot a long time I'm basically I'm\nchoking I'm gonna lie I'm choking today\nit is what it is sometimes I also choke\num so basically it's going to handle\nthese messages one by one that's maybe a\nbetter approach so there is no need to\nlock it so let's I'm gonna give you an\nexample so let's refactor this handle\ninto a Hollywood uh which is an active\nframework for golang the only thing you\nneed to do let me actually open it up\ncan I do this without causing um\nneeds to be leaked let me go GitHub boom\njust like this\nlook at this guy heat let's pump this up\nwhere is uh how do I do this man what's\ngoing on each\nwhat was going on\nwhere are my settings uh-huh heat right\nand we're going to Hollywood heat boom\njust like that and this is basically the\nframework the actor model framework uh\nbasically fast low latency Act is blah\nblah blah what is the actor model read\nit features a nice documentation and all\nthat stuff that's what we're going to\nuse right so basically how do we install\nit very simple let's clear the screen\nwe're going to say go get\ngithub.com right and VM that's me and\nI'm gonna say holy root boom just like\nthis but and it's probably already been\ndone let me see in my mod file here real\nquick uh what's going on in VT protop\ncan we do go more tidy real quick uh TD\nnothing happened it's all good it's all\nfine right so what we're going to do\nfirst is we're going to transform or\nhandle it into a receiver right an actor\nor a receiver in Hollywood it calls a\nreceiver and not acted because we are\njust\num receiving right it makes sense so uh\nthe first thing we're gonna do is we're\ngoing to make a functioning let's copy\nthis\njust like that and we're going to call\nthis function receive that's something\nwe need to implement right we're going\nto receive Heat and the message is going\nto be any it could be anything we want\nand we're going to say we're going to\nswitch heat switch message\nuh based on the it's not I'm so wrong\nit's going to be a context\nbut I'm not on point today you're not\ngonna lie\nlike the context by the way actor\ncontext just like that so we're gonna\nbasically switch heat on the\nmessage the context message and we're\ngoing to switch on the type right and uh\nby default each time\num you're basically gonna boot up if the\nengine is going to spin up your actors\nwhat's going to happen is that the\nsystem itself the engine itself is going\nto send messages to your actor so you\nknow it started you know it stopped you\nknow it's initialized and all that stuff\nright so we could already say case act\nstarted\nuh just like that then we're gonna say\ncase actors stopped right if your actor\nis stopped you're gonna get the stop\nmessage if your actor is started you're\ngoing to get the started message and if\nyour actor is initialized you're gonna\nget the initialized method uh message\nright so we could say heat fmt parental\nn\nErland by the way we're gonna say uh my\nactor basically Handler started Handler\nuh star that\njust like that and we could say\nbasically uh it's maybe a nice thing to\ndo each time actually to be honest let's\ndo it and initialize right\nhandle it initialized\nare we going to say\num\nmy States\nand my state is going to be H State just\nlike that and we're going to actually\ninitialize the state with some value\nwe're going to say state is 10 right\nState stand that's fine\nuh let's do this for the compiler real\nquick here\nso we don't have any problems so\nbasically that's that the next thing\nwe're going to do this handle message\nwe're going to basically delete the\nstuff right we don't need it anymore the\nnext thing we're going to do here is uh\nwe don't need this for Loop anymore and\nwe don't need this actually to be honest\nthe first thing we need to we need to do\nis make a kind of a Constructor for our\nHandler so we're going to say funk uh\nnew handle it\nand that's going to return an actor's\nreceiver\nright and we're going to return\nbasically just a pointer to ourselves\nhandlers\njust like that boom that's fine the next\nthing you're going to do here and mean\nlet me scroll up the screen real quick\nuh we're gonna make a new engine right\nwe're gonna say actors new engine very\nimportant the engine is basically\nsomething that handles uh and tracks and\nmanage basically all of Orchard bang it\njust double checking if I'm recording\nbecause not the first time that I'm\nbasically uh talking gibberish\num for nobody right so we're going to\nsay acted a new engine and this engine\nis basically uh going has the\ncapabilities of spawning stuff right so\nwe're going to say engine spawn me\nyou're going to call engine spawn you're\ngoing to say new handlet\nand I'm gonna call this uh Handler or my\nHandler or whatever you want and the\nspawn method is going to return a\nprocess ID right let me print out the\nprocess idea real quick we're going to\nsay fmt parental n bit do this\nmaybe this this and this right so let me\nthat's the the there is can be it's fine\nso you could see what happening uh we\nbasically have some traces from\nHollywood so I'm logging from Hollywood\nitself uh you're gonna say handle\nstarter that is basically our\num\nstarted function first of all we get the\nHandle initialized by the way state is\n10 then we're going to start and then\nbasically here you could see the pit\nlocal Handler right because we are using\nright now the local engine there is no\nnetworking involved although the library\nsupports that but that's for later first\nthings first right\num that's that so of course that's fine\nthe next thing we're going to do is\ncreate a custom type right you're going\nto say\nincrements state for example\nand that's going to be a structured\nnot increment say it me you're going to\nsay set state\nand we're going to say the value is\ngoing to be a unit right and each time\nwe're going to receive case uh set state\nright if we receive the message set\nState we basically going to say let me\ncopy this printable and thingy Handler\num\nreceived new States\njust like this and it's going to be a\nstate just like that and we gonna say\nHandler States is going to be a message\ndot uh value right just like that\nno need for this anymore\num okay so that's that how can we send\nmessages to this process you could send\nmessages from the engine itself you\ncould also use the engine to send\nmessages from another process because we\ncould have a player and a UI object or\nsomething or a player an enemy or\nsomething else and you could they could\nsend messages to each other without the\nneed of mutexes all pretty fine and it's\npretty fast you could say yeah but\nyou're handling these messages one by\none I can handle I don't know how it I\nthink it was 10 million messages under a\nsecond right under him I will show you\nthe Benchmark the benchmarks uh soon I\nthink it's even faster\nI think it was under a millisecond or\nsomething\nall right so what we're gonna do here\nbasically let's make a loop real quick\nwe're going to say four uh X is zero\nX smaller 10 and I'm going to say\num X plus plus not sure but I'm using X\nbut it is what it is\nyes we're gonna say engine sent me send\nme to this bit right we're gonna give uh\nthe bits and then we're gonna send the\nmessage and that's going to be a set\nstated and we're going to say that the\nvalue is going to be the unit of our uh\niterator right that's that and it's X\nyeah that's fine so that's what we're\ngonna do let's run this again let's\ncreate this clean real quick uh go run\nboom and you can see that the Handler\nreceived a new state 0 1 2 and yada yada\nyada that's basically uh working\nperfectly fine so\nyou can give your you can make your\ncustom messages and these messages you\ncan use to send them to your actors and\nyou can basically implement this case\nstatement here so each time there is a\nset State message it's going to do\nexactly what you describe it to do right\nand you could have multiple messages\nright you could say for example type\nreset state for example reset State it's\ngoing to be a structure and in this case\nwe don't need to have any value in it\nbecause we're going to reset the state\nright maybe you could reset it to a\ncertain value that's true but in this\ncase we're just going to reset it to\nzero so how we're going to do that it's\nvery simply going to say case a reset\nstate\nI'm going to say that the state of the\nhandle is going to be zero heat and then\nwe're going to say hit boom received\njust like this reset States and our\nstate is this and then we're gonna do\nthat basically after our Loop here it's\nso annoying that VM basically doesn't\ngive me some space beneath maybe I\nshould install a plugin for that so\nbasically we're gonna Loop 10 times\nyou're gonna send uh a message the set\nState message would basically just\nincrements in this case and then we're\ngonna say for example e send me to the\nsame pit but send me the reset State\nmessage just like that right so boom\nlet's run this again voila you can see\nwe are setting our state and by the end\nof our loop we're going to reset the\nstate\njust like that and you can have multiple\nmessages right I'm using actor model and\nproduction\num the company where I work for and we\nare basically having\n100 of messages different things right\nthat's getting sent daily in production\nright so that's that basically uh what\nI'm gonna show you real quick is\num\nyou see if we make it if if we make this\ngo right if you do go heat go Cent right\nand we're gonna run it again let's clear\nthe screen in a blink of an eye and then\nwe do this again nothing happens right\nthere is no race condition there is no\nnothing because it's the actor model of\ncourse uh if you do this right go sent\nthese messages will not come in order\nhey that's completely fine but we have\nno risk conditions that's the important\nstuff right you can never have this\nsynchronized right if you do that that's\nthat's impossible right but it's safe\nright each time you're gonna handle your\nset state or reset State you're going to\nhave your exact value\nit's not gonna it there is no concurrent\nreader writes right that's the\npoint to take away\num\n70 minutes right so basically what I'm\ngoing to show you is how fast it's going\nto be actually\nwhat can I do I can do\n it's in Hollywood itself\nlet me open up\nboom this thing in here let me show I\nthink I have this Benchmark somewhere\nhere right yeah so you could see uh it's\ngoing to this is 100 Mil this is\nbasically this is 10 million 10 million\nmessages in under a second right\nthat's basically uh\npretty impressive\nif you tell me right it's probably the\nfastest outlet but it doesn't matter\nright it works and that's the most\nimportant thing so that's basically a\nvery uh briefly overview on the active\nmodel the thing you need to take away\nwith this is very commonly used for\nhighly concurrent distributed systems\nthink about Game servers RTS uh games\num\ntrading engines and all that Shenanigans\num\nand an actor is basically just a some\nkind of an entity that acts upon\nmessages it receives from\nother entities slash actors right and it\nhandles these messages it has a mailbox\nand it basically will queue up all these\nmessages and it will process these\nmessages one by one and you could\nbasically see if your state or you could\num you could do a lot of stuff so you\ncan basically make it completely fall\ntolerant if you want more information in\nthe readme of\nHollywood right I hope this video was\nkind of useful for you like I said I\ncould basically uh spend hours\nexplaining you know all the techniques\nuh making a remote you could use uh\nHollywood check out the documentation\nyou can make remote actors so you can\nbasically send messages from one server\nto another server and communicate with\neach other and all that stuff as some\nkind of a micro service approach because\nthat's basically what it is right all\nthese small uh actors you could live a\ndifferent service so you could have\nbasically a microservice architecture in\nthis\num\nyeah I basically forgot what I want to\nsay\nlike I said I'm going to keep it like\nthis 20 minutes pretty fine if you have\nmore questions jump into the Discord\nCommunity or put your question into the\ncomments\num because there's a lot of more stuff\nto cover and I will basically add more\nvideos about it over time for the people\nlike I said that really want to level up\ncheck out the patreon and for the people\nthat willing to learn golang completely\nfrom scratch everything the basics Json\napis concurrency micro services with\nDocker and all that stuff and a bonus a\nbonus course basically a bonus\num thingy built your own blockchain from\nscratch in golang uh it's I don't know\nit's going with the countless hours of\ngo content countless hours it's not a\ncourse of 10 hours of tuna it's going to\nbe hundreds of hours of content for you\nto consume in the full-time go Dev\ncourse I'm releasing it's in pre-order\nright now\nthanks for watching and I see you soon\nwhen I moved because look at this my\nhouse is completely empty this is the\nlast video I'm going to record here\nbecause we're leveling up the next time\nI will be more live more videos in my\nnew little cozy place thanks for\nwatching and see you soon bye
		`,
		"oi, o que é o actor paradigm?",
	)
	badSentence := "I want to kill them."
	query := "Hi, could you please explain what the actor paradigm is?"
	chatModerator(badSentence)
	chatModerator(query)
	//functionCall()
	//tts()
	//whisper()
	//image()
	//vision()
}
